/* -*-c++-*- OpenSceneGraph - Copyright (C) 2009 Wang Rui
 *
 * This library is open source and may be redistributed and/or modified under
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSGVIEWER_GRAPHICSWINDOWQT
#define OSGVIEWER_GRAPHICSWINDOWQT

#include <osgViewer/GraphicsWindow>

#include <QMutex>
#include <QEvent>
#include <QQueue>
#include <QSet>
#include <QOpenGLWidget>

class QInputEvent;
class QGestureEvent;

namespace osgViewer {
    class ViewerBase;
}

namespace osgQt
{

class GraphicsWindowQt : public osgViewer::GraphicsWindow
{
public:
    GraphicsWindowQt( osg::GraphicsContext::Traits* traits, QWidget* parent = NULL, const QOpenGLWidget* shareWidget = NULL, Qt::WindowFlags f = 0 );
    GraphicsWindowQt( QOpenGLWidget* widget );
    virtual ~GraphicsWindowQt();

    inline QOpenGLWidget* getQOpenGLWidget() { return _widget; }
    inline const QOpenGLWidget* getQOpenGLWidget() const { return _widget; }

    struct WindowData : public osg::Referenced
    {
        WindowData( QOpenGLWidget* widget = NULL, QWidget* parent = NULL ): _widget(widget), _parent(parent) {}
        QOpenGLWidget* _widget;
        QWidget* _parent;
    };

    bool init( QWidget* parent, const QOpenGLWidget* shareWidget, Qt::WindowFlags f );

    static QSurfaceFormat traits2QSurfaceFormat( const osg::GraphicsContext::Traits* traits );
    static void QSurfaceFormat2traits( const QSurfaceFormat& format, osg::GraphicsContext::Traits* traits );
    static osg::GraphicsContext::Traits* createTraits( const QOpenGLWidget* widget );

    virtual const char* libraryName() const
    {
        return "";
    }
    virtual const char* className() const
    {
        return "GraphicsWindowQt";
    }

    // dummy implementations, assume that graphics context is *always* current and valid.
    virtual bool valid() const
    {
        return true;
    }
    virtual bool realizeImplementation()
    {
        return true;
    }
    virtual bool isRealizedImplementation() const
    {
        return true;
    }
    virtual void closeImplementation() {}
    virtual bool makeCurrentImplementation()
    {
        return true;
    }
    virtual bool releaseContextImplementation()
    {
        return true;
    }
    virtual void swapBuffersImplementation() {}
    virtual void grabFocus() {}
    virtual void grabFocusIfPointerInWindow() {}
    virtual void raiseWindow() {}

protected:

    friend class QOpenGLWidget;
    QOpenGLWidget* _widget;
    bool _ownsWidget;
    QCursor _currentCursor;
    bool _realized;
};

}

#endif
